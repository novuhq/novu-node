/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type TopicSubscriberDtoEnvironmentId = {};

export type TopicSubscriberDtoOrganizationId = {};

export type SubscriberId = {};

export type TopicId = {};

export type ExternalSubscriberId = {};

export type TopicSubscriberDtoTopicKey = {};

export type TopicSubscriberDto = {
    environmentId: TopicSubscriberDtoEnvironmentId;
    organizationId: TopicSubscriberDtoOrganizationId;
    subscriberId: SubscriberId;
    topicId: TopicId;
    externalSubscriberId: ExternalSubscriberId;
    topicKey: TopicSubscriberDtoTopicKey;
};

/** @internal */
export const TopicSubscriberDtoEnvironmentId$inboundSchema: z.ZodType<
    TopicSubscriberDtoEnvironmentId,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TopicSubscriberDtoEnvironmentId$Outbound = {};

/** @internal */
export const TopicSubscriberDtoEnvironmentId$outboundSchema: z.ZodType<
    TopicSubscriberDtoEnvironmentId$Outbound,
    z.ZodTypeDef,
    TopicSubscriberDtoEnvironmentId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicSubscriberDtoEnvironmentId$ {
    /** @deprecated use `TopicSubscriberDtoEnvironmentId$inboundSchema` instead. */
    export const inboundSchema = TopicSubscriberDtoEnvironmentId$inboundSchema;
    /** @deprecated use `TopicSubscriberDtoEnvironmentId$outboundSchema` instead. */
    export const outboundSchema = TopicSubscriberDtoEnvironmentId$outboundSchema;
    /** @deprecated use `TopicSubscriberDtoEnvironmentId$Outbound` instead. */
    export type Outbound = TopicSubscriberDtoEnvironmentId$Outbound;
}

/** @internal */
export const TopicSubscriberDtoOrganizationId$inboundSchema: z.ZodType<
    TopicSubscriberDtoOrganizationId,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TopicSubscriberDtoOrganizationId$Outbound = {};

/** @internal */
export const TopicSubscriberDtoOrganizationId$outboundSchema: z.ZodType<
    TopicSubscriberDtoOrganizationId$Outbound,
    z.ZodTypeDef,
    TopicSubscriberDtoOrganizationId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicSubscriberDtoOrganizationId$ {
    /** @deprecated use `TopicSubscriberDtoOrganizationId$inboundSchema` instead. */
    export const inboundSchema = TopicSubscriberDtoOrganizationId$inboundSchema;
    /** @deprecated use `TopicSubscriberDtoOrganizationId$outboundSchema` instead. */
    export const outboundSchema = TopicSubscriberDtoOrganizationId$outboundSchema;
    /** @deprecated use `TopicSubscriberDtoOrganizationId$Outbound` instead. */
    export type Outbound = TopicSubscriberDtoOrganizationId$Outbound;
}

/** @internal */
export const SubscriberId$inboundSchema: z.ZodType<SubscriberId, z.ZodTypeDef, unknown> = z.object(
    {}
);

/** @internal */
export type SubscriberId$Outbound = {};

/** @internal */
export const SubscriberId$outboundSchema: z.ZodType<
    SubscriberId$Outbound,
    z.ZodTypeDef,
    SubscriberId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberId$ {
    /** @deprecated use `SubscriberId$inboundSchema` instead. */
    export const inboundSchema = SubscriberId$inboundSchema;
    /** @deprecated use `SubscriberId$outboundSchema` instead. */
    export const outboundSchema = SubscriberId$outboundSchema;
    /** @deprecated use `SubscriberId$Outbound` instead. */
    export type Outbound = SubscriberId$Outbound;
}

/** @internal */
export const TopicId$inboundSchema: z.ZodType<TopicId, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type TopicId$Outbound = {};

/** @internal */
export const TopicId$outboundSchema: z.ZodType<TopicId$Outbound, z.ZodTypeDef, TopicId> = z.object(
    {}
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicId$ {
    /** @deprecated use `TopicId$inboundSchema` instead. */
    export const inboundSchema = TopicId$inboundSchema;
    /** @deprecated use `TopicId$outboundSchema` instead. */
    export const outboundSchema = TopicId$outboundSchema;
    /** @deprecated use `TopicId$Outbound` instead. */
    export type Outbound = TopicId$Outbound;
}

/** @internal */
export const ExternalSubscriberId$inboundSchema: z.ZodType<
    ExternalSubscriberId,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type ExternalSubscriberId$Outbound = {};

/** @internal */
export const ExternalSubscriberId$outboundSchema: z.ZodType<
    ExternalSubscriberId$Outbound,
    z.ZodTypeDef,
    ExternalSubscriberId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalSubscriberId$ {
    /** @deprecated use `ExternalSubscriberId$inboundSchema` instead. */
    export const inboundSchema = ExternalSubscriberId$inboundSchema;
    /** @deprecated use `ExternalSubscriberId$outboundSchema` instead. */
    export const outboundSchema = ExternalSubscriberId$outboundSchema;
    /** @deprecated use `ExternalSubscriberId$Outbound` instead. */
    export type Outbound = ExternalSubscriberId$Outbound;
}

/** @internal */
export const TopicSubscriberDtoTopicKey$inboundSchema: z.ZodType<
    TopicSubscriberDtoTopicKey,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TopicSubscriberDtoTopicKey$Outbound = {};

/** @internal */
export const TopicSubscriberDtoTopicKey$outboundSchema: z.ZodType<
    TopicSubscriberDtoTopicKey$Outbound,
    z.ZodTypeDef,
    TopicSubscriberDtoTopicKey
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicSubscriberDtoTopicKey$ {
    /** @deprecated use `TopicSubscriberDtoTopicKey$inboundSchema` instead. */
    export const inboundSchema = TopicSubscriberDtoTopicKey$inboundSchema;
    /** @deprecated use `TopicSubscriberDtoTopicKey$outboundSchema` instead. */
    export const outboundSchema = TopicSubscriberDtoTopicKey$outboundSchema;
    /** @deprecated use `TopicSubscriberDtoTopicKey$Outbound` instead. */
    export type Outbound = TopicSubscriberDtoTopicKey$Outbound;
}

/** @internal */
export const TopicSubscriberDto$inboundSchema: z.ZodType<
    TopicSubscriberDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        _environmentId: z.lazy(() => TopicSubscriberDtoEnvironmentId$inboundSchema),
        _organizationId: z.lazy(() => TopicSubscriberDtoOrganizationId$inboundSchema),
        _subscriberId: z.lazy(() => SubscriberId$inboundSchema),
        _topicId: z.lazy(() => TopicId$inboundSchema),
        externalSubscriberId: z.lazy(() => ExternalSubscriberId$inboundSchema),
        topicKey: z.lazy(() => TopicSubscriberDtoTopicKey$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            _environmentId: "environmentId",
            _organizationId: "organizationId",
            _subscriberId: "subscriberId",
            _topicId: "topicId",
        });
    });

/** @internal */
export type TopicSubscriberDto$Outbound = {
    _environmentId: TopicSubscriberDtoEnvironmentId$Outbound;
    _organizationId: TopicSubscriberDtoOrganizationId$Outbound;
    _subscriberId: SubscriberId$Outbound;
    _topicId: TopicId$Outbound;
    externalSubscriberId: ExternalSubscriberId$Outbound;
    topicKey: TopicSubscriberDtoTopicKey$Outbound;
};

/** @internal */
export const TopicSubscriberDto$outboundSchema: z.ZodType<
    TopicSubscriberDto$Outbound,
    z.ZodTypeDef,
    TopicSubscriberDto
> = z
    .object({
        environmentId: z.lazy(() => TopicSubscriberDtoEnvironmentId$outboundSchema),
        organizationId: z.lazy(() => TopicSubscriberDtoOrganizationId$outboundSchema),
        subscriberId: z.lazy(() => SubscriberId$outboundSchema),
        topicId: z.lazy(() => TopicId$outboundSchema),
        externalSubscriberId: z.lazy(() => ExternalSubscriberId$outboundSchema),
        topicKey: z.lazy(() => TopicSubscriberDtoTopicKey$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            environmentId: "_environmentId",
            organizationId: "_organizationId",
            subscriberId: "_subscriberId",
            topicId: "_topicId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicSubscriberDto$ {
    /** @deprecated use `TopicSubscriberDto$inboundSchema` instead. */
    export const inboundSchema = TopicSubscriberDto$inboundSchema;
    /** @deprecated use `TopicSubscriberDto$outboundSchema` instead. */
    export const outboundSchema = TopicSubscriberDto$outboundSchema;
    /** @deprecated use `TopicSubscriberDto$Outbound` instead. */
    export type Outbound = TopicSubscriberDto$Outbound;
}
