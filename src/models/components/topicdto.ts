/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type TopicDtoEnvironmentId = {};

export type TopicDtoId = {};

export type TopicDtoOrganizationId = {};

export type TopicDtoKey = {};

export type TopicDtoName = {};

export type TopicDto = {
    environmentId: TopicDtoEnvironmentId;
    id?: TopicDtoId | undefined;
    organizationId: TopicDtoOrganizationId;
    key: TopicDtoKey;
    name: TopicDtoName;
    subscribers: Array<string>;
};

/** @internal */
export const TopicDtoEnvironmentId$inboundSchema: z.ZodType<
    TopicDtoEnvironmentId,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TopicDtoEnvironmentId$Outbound = {};

/** @internal */
export const TopicDtoEnvironmentId$outboundSchema: z.ZodType<
    TopicDtoEnvironmentId$Outbound,
    z.ZodTypeDef,
    TopicDtoEnvironmentId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicDtoEnvironmentId$ {
    /** @deprecated use `TopicDtoEnvironmentId$inboundSchema` instead. */
    export const inboundSchema = TopicDtoEnvironmentId$inboundSchema;
    /** @deprecated use `TopicDtoEnvironmentId$outboundSchema` instead. */
    export const outboundSchema = TopicDtoEnvironmentId$outboundSchema;
    /** @deprecated use `TopicDtoEnvironmentId$Outbound` instead. */
    export type Outbound = TopicDtoEnvironmentId$Outbound;
}

/** @internal */
export const TopicDtoId$inboundSchema: z.ZodType<TopicDtoId, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type TopicDtoId$Outbound = {};

/** @internal */
export const TopicDtoId$outboundSchema: z.ZodType<TopicDtoId$Outbound, z.ZodTypeDef, TopicDtoId> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicDtoId$ {
    /** @deprecated use `TopicDtoId$inboundSchema` instead. */
    export const inboundSchema = TopicDtoId$inboundSchema;
    /** @deprecated use `TopicDtoId$outboundSchema` instead. */
    export const outboundSchema = TopicDtoId$outboundSchema;
    /** @deprecated use `TopicDtoId$Outbound` instead. */
    export type Outbound = TopicDtoId$Outbound;
}

/** @internal */
export const TopicDtoOrganizationId$inboundSchema: z.ZodType<
    TopicDtoOrganizationId,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TopicDtoOrganizationId$Outbound = {};

/** @internal */
export const TopicDtoOrganizationId$outboundSchema: z.ZodType<
    TopicDtoOrganizationId$Outbound,
    z.ZodTypeDef,
    TopicDtoOrganizationId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicDtoOrganizationId$ {
    /** @deprecated use `TopicDtoOrganizationId$inboundSchema` instead. */
    export const inboundSchema = TopicDtoOrganizationId$inboundSchema;
    /** @deprecated use `TopicDtoOrganizationId$outboundSchema` instead. */
    export const outboundSchema = TopicDtoOrganizationId$outboundSchema;
    /** @deprecated use `TopicDtoOrganizationId$Outbound` instead. */
    export type Outbound = TopicDtoOrganizationId$Outbound;
}

/** @internal */
export const TopicDtoKey$inboundSchema: z.ZodType<TopicDtoKey, z.ZodTypeDef, unknown> = z.object(
    {}
);

/** @internal */
export type TopicDtoKey$Outbound = {};

/** @internal */
export const TopicDtoKey$outboundSchema: z.ZodType<
    TopicDtoKey$Outbound,
    z.ZodTypeDef,
    TopicDtoKey
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicDtoKey$ {
    /** @deprecated use `TopicDtoKey$inboundSchema` instead. */
    export const inboundSchema = TopicDtoKey$inboundSchema;
    /** @deprecated use `TopicDtoKey$outboundSchema` instead. */
    export const outboundSchema = TopicDtoKey$outboundSchema;
    /** @deprecated use `TopicDtoKey$Outbound` instead. */
    export type Outbound = TopicDtoKey$Outbound;
}

/** @internal */
export const TopicDtoName$inboundSchema: z.ZodType<TopicDtoName, z.ZodTypeDef, unknown> = z.object(
    {}
);

/** @internal */
export type TopicDtoName$Outbound = {};

/** @internal */
export const TopicDtoName$outboundSchema: z.ZodType<
    TopicDtoName$Outbound,
    z.ZodTypeDef,
    TopicDtoName
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicDtoName$ {
    /** @deprecated use `TopicDtoName$inboundSchema` instead. */
    export const inboundSchema = TopicDtoName$inboundSchema;
    /** @deprecated use `TopicDtoName$outboundSchema` instead. */
    export const outboundSchema = TopicDtoName$outboundSchema;
    /** @deprecated use `TopicDtoName$Outbound` instead. */
    export type Outbound = TopicDtoName$Outbound;
}

/** @internal */
export const TopicDto$inboundSchema: z.ZodType<TopicDto, z.ZodTypeDef, unknown> = z
    .object({
        _environmentId: z.lazy(() => TopicDtoEnvironmentId$inboundSchema),
        _id: z.lazy(() => TopicDtoId$inboundSchema).optional(),
        _organizationId: z.lazy(() => TopicDtoOrganizationId$inboundSchema),
        key: z.lazy(() => TopicDtoKey$inboundSchema),
        name: z.lazy(() => TopicDtoName$inboundSchema),
        subscribers: z.array(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            _environmentId: "environmentId",
            _id: "id",
            _organizationId: "organizationId",
        });
    });

/** @internal */
export type TopicDto$Outbound = {
    _environmentId: TopicDtoEnvironmentId$Outbound;
    _id?: TopicDtoId$Outbound | undefined;
    _organizationId: TopicDtoOrganizationId$Outbound;
    key: TopicDtoKey$Outbound;
    name: TopicDtoName$Outbound;
    subscribers: Array<string>;
};

/** @internal */
export const TopicDto$outboundSchema: z.ZodType<TopicDto$Outbound, z.ZodTypeDef, TopicDto> = z
    .object({
        environmentId: z.lazy(() => TopicDtoEnvironmentId$outboundSchema),
        id: z.lazy(() => TopicDtoId$outboundSchema).optional(),
        organizationId: z.lazy(() => TopicDtoOrganizationId$outboundSchema),
        key: z.lazy(() => TopicDtoKey$outboundSchema),
        name: z.lazy(() => TopicDtoName$outboundSchema),
        subscribers: z.array(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            environmentId: "_environmentId",
            id: "_id",
            organizationId: "_organizationId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicDto$ {
    /** @deprecated use `TopicDto$inboundSchema` instead. */
    export const inboundSchema = TopicDto$inboundSchema;
    /** @deprecated use `TopicDto$outboundSchema` instead. */
    export const outboundSchema = TopicDto$outboundSchema;
    /** @deprecated use `TopicDto$Outbound` instead. */
    export type Outbound = TopicDto$Outbound;
}
