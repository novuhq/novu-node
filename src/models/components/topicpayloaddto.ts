/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type TopicKey = {};

export const TopicPayloadDtoType = {
    Subscriber: "Subscriber",
    Topic: "Topic",
} as const;
export type TopicPayloadDtoType = ClosedEnum<typeof TopicPayloadDtoType>;

export type TopicPayloadDto = {
    topicKey: TopicKey;
    type: TopicPayloadDtoType;
};

/** @internal */
export const TopicKey$inboundSchema: z.ZodType<TopicKey, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type TopicKey$Outbound = {};

/** @internal */
export const TopicKey$outboundSchema: z.ZodType<TopicKey$Outbound, z.ZodTypeDef, TopicKey> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicKey$ {
    /** @deprecated use `TopicKey$inboundSchema` instead. */
    export const inboundSchema = TopicKey$inboundSchema;
    /** @deprecated use `TopicKey$outboundSchema` instead. */
    export const outboundSchema = TopicKey$outboundSchema;
    /** @deprecated use `TopicKey$Outbound` instead. */
    export type Outbound = TopicKey$Outbound;
}

/** @internal */
export const TopicPayloadDtoType$inboundSchema: z.ZodNativeEnum<typeof TopicPayloadDtoType> =
    z.nativeEnum(TopicPayloadDtoType);

/** @internal */
export const TopicPayloadDtoType$outboundSchema: z.ZodNativeEnum<typeof TopicPayloadDtoType> =
    TopicPayloadDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicPayloadDtoType$ {
    /** @deprecated use `TopicPayloadDtoType$inboundSchema` instead. */
    export const inboundSchema = TopicPayloadDtoType$inboundSchema;
    /** @deprecated use `TopicPayloadDtoType$outboundSchema` instead. */
    export const outboundSchema = TopicPayloadDtoType$outboundSchema;
}

/** @internal */
export const TopicPayloadDto$inboundSchema: z.ZodType<TopicPayloadDto, z.ZodTypeDef, unknown> =
    z.object({
        topicKey: z.lazy(() => TopicKey$inboundSchema),
        type: TopicPayloadDtoType$inboundSchema,
    });

/** @internal */
export type TopicPayloadDto$Outbound = {
    topicKey: TopicKey$Outbound;
    type: string;
};

/** @internal */
export const TopicPayloadDto$outboundSchema: z.ZodType<
    TopicPayloadDto$Outbound,
    z.ZodTypeDef,
    TopicPayloadDto
> = z.object({
    topicKey: z.lazy(() => TopicKey$outboundSchema),
    type: TopicPayloadDtoType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicPayloadDto$ {
    /** @deprecated use `TopicPayloadDto$inboundSchema` instead. */
    export const inboundSchema = TopicPayloadDto$inboundSchema;
    /** @deprecated use `TopicPayloadDto$outboundSchema` instead. */
    export const outboundSchema = TopicPayloadDto$outboundSchema;
    /** @deprecated use `TopicPayloadDto$Outbound` instead. */
    export type Outbound = TopicPayloadDto$Outbound;
}
